add_library(lib_evolutionary_dynamics world.cc map.cc imgui/imgui.cpp imgui/imgui_draw.cpp imgui/imgui_widgets.cpp imgui/imgui_demo.cpp imgui/imgui-SFML.cpp)

target_include_directories(lib_evolutionary_dynamics PUBLIC ${include_dir})
target_include_directories(lib_evolutionary_dynamics PUBLIC ${extern_include_dir})
target_include_directories(lib_evolutionary_dynamics PUBLIC ${sfml_include_dir})
target_include_directories(lib_evolutionary_dynamics PUBLIC ${imgui_include_dir})

if(MSVC)
  add_definitions(-DSFML_STATIC)
  target_link_libraries(lib_evolutionary_dynamics winmm.lib)
  target_link_libraries(lib_evolutionary_dynamics opengl32.lib)
  target_link_libraries(lib_evolutionary_dynamics gdi32.lib)
  target_link_libraries(lib_evolutionary_dynamics ws2_32.lib)
  target_link_libraries(lib_evolutionary_dynamics ${sfml_lib_dir}/ogg.lib)
  target_link_libraries(lib_evolutionary_dynamics ${sfml_lib_dir}/vorbis.lib)
  target_link_libraries(lib_evolutionary_dynamics ${sfml_lib_dir}/vorbisenc.lib)
  target_link_libraries(lib_evolutionary_dynamics ${sfml_lib_dir}/vorbisfile.lib)
  target_link_libraries(lib_evolutionary_dynamics ${sfml_lib_dir}/flac.lib)
  target_link_libraries(lib_evolutionary_dynamics ${sfml_lib_dir}/freetype.lib)
  target_link_libraries(lib_evolutionary_dynamics ${sfml_lib_dir}/sfml-system-s.lib)
  target_link_libraries(lib_evolutionary_dynamics ${sfml_lib_dir}/sfml-network-s.lib)
  target_link_libraries(lib_evolutionary_dynamics ${sfml_lib_dir}/sfml-window-s.lib)
  target_link_libraries(lib_evolutionary_dynamics ${sfml_lib_dir}/sfml-audio-s.lib)
  target_link_libraries(lib_evolutionary_dynamics ${sfml_lib_dir}/sfml-graphics-s.lib)
else() # linux
  find_package(SFML 2.5 COMPONENTS system window graphics network audio)
  target_link_libraries(lib_evolutionary_dynamics sfml-system sfml-window sfml-graphics sfml-network sfml-audio)
endif(MSVC)

if(MSVC)
  set_target_properties(lib_evolutionary_dynamics PROPERTIES ARCHIVE_OUTPUT_DIRECTORY  ${PROJECT_BINARY_DIR})
  set_target_properties(lib_evolutionary_dynamics PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${PROJECT_BINARY_DIR})
  set_target_properties(lib_evolutionary_dynamics PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${PROJECT_BINARY_DIR})
else()
  set_target_properties(lib_evolutionary_dynamics PROPERTIES ARCHIVE_OUTPUT_DIRECTORY  ${PROJECT_BINARY_DIR})
endif(MSVC)

add_executable(evolutionary_dynamics main.cc)
target_link_libraries(evolutionary_dynamics PRIVATE lib_evolutionary_dynamics)
target_include_directories(evolutionary_dynamics PUBLIC ${include_dir})
target_include_directories(evolutionary_dynamics PUBLIC ${extern_include_dir})
target_include_directories(lib_evolutionary_dynamics PUBLIC ${sfml_include_dir})
target_include_directories(lib_evolutionary_dynamics PUBLIC ${imgui_include_dir})


if(MSVC)
  set_target_properties(evolutionary_dynamics PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})
  set_target_properties(evolutionary_dynamics PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ${PROJECT_BINARY_DIR})
  set_target_properties(evolutionary_dynamics PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ${PROJECT_BINARY_DIR})
else()
  set_target_properties(evolutionary_dynamics PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})
endif(MSVC)
